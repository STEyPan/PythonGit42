# Операторы
# Оператор - это непосредственно действие, которое должно произойти - то ЧТО будет сделано

# Операнд - это непосредственные участники действия (переменные, над которыми будет происходить действие) - то НАД чем будет происходить действие

# First + Second
# First и Second - операнды
# + - операторы

# По количеству операндов ВСЕ операторы деляться на ТРИ типа:
# Унарные операторы - которые действуют с 1 операндом
# Бинарные операторы - которые действуют с 2 операндами
# Тернарный оператор - который действуют с 3 операндами

# Унарные операторы - <оператор> <операнд>:
    # Логическое НЕ - not <переменная>
    # Описание - меняет значение <переменной> на обратное
    # НЬЮАНС - имеется ОБРАТНОЕ с точки зрения ЛОГИКИ, а не типа данных переменной
    # Пример - Variable = not True - занесется значение False
    # num = 12
    # print(not num) - выведется False

# Бинарные операторы <оператор> <операнд> <оператор>:
    # Арифметические операторы - ' + - * / % // ** '
        # + - * / - это простые арифметчиеские действия
        # //  это деление с отбрасыванием остатка в сторону
        # ** это возведение в степень
        # % - остаток от деления
            # НЬЮАНС - имется в виду не целый остаток от деления, а та часть левого операнда, которая не поделилась на правый
        # Пример - A + B -> A.operator+(B)

    # Операторы присваивания - ' = += -= *= /= %= **= //= '
        # '=' - оператор присваивания - заносит в левый операнд значение правого операнда
            # НЬЮАНС - если справа стоит отличный от левого операнда тип данных, то оператор попытается привести этот тип к типу данных левого операнда
            # НЬЮАНС Python с оператором '=' - так как Python динамически типизированный ЯП, то ему особо не важно какой у переменной тип данных и он всегда проведет операцию присвоения, за исключения const переменных
            # НЕ Python НЬЮАНС - в других ЯП оператор присваивания возвращает значение типа bool как факт того, смог он произвести присвоение или нет. ЭТО ВАЖНО помнить во время написания условий

    # Логические операторы - and, or, is, ==, != , >, <, >=, <=
        # Операторы сравнения - ' ==, !=, >, <, >=, <= '
        # Операторы логических выражений - and и or
        # Оператор сравнения типа - is

# Тернарный оператор
    # Синтаксис - <операнд> if <операнд> else <операнд>
    # Описание - является аналогом конструкции if-else для использования в простых операциях
    # Работы в зависимости от значения первого операнда выбирает какой из двух оставшихся операндов подставить
    # nummer % 2 == 0 if nummer % 2 else nummer // 2 + 1
        # ВАЖНО - Тернарный оператор является КРАЙНЕ не рекомендуемым оператором к применению. Причиной является СИЛЬНОЕ ухудшение читаемости кода.
        # Поэтому ВАЖНО помнить, что его следует использовать в редких КРАЙНИХ случаях
