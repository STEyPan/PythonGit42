# Функции - уровень Middle

# Параметры по-умолчанию
# Иногда в процессе создания программы возникают функции, которые могут иметь больше параметров, чем им на самом деле нужно или же они могут принимать какие-то параметры в качестве не обязательных. Такие параметры описываются как и все остальные, но имеют какое-то значение на случай, если их не будут использовать. Подобные параметры называются параметрами ПО_УМОЛЧАНИЮ
# Синтаксис: def <функция> (<имя параметра> = <значение по-умолчанию>)
# ВАЖНО - ВСЕ параметры по-умолчанию ОБЯЗАНЫ идти В КОНЦЕ списка параметров
# Пример:
def square(length: int,
           sign: str = "#",
           fill: bool = True):
    '''
    Функция используется для рисования в консоли квадрата символов (sign) шириной (lenght)
    :param length: ширина квадрата
    :param sign: знак, которым осуществляется рисование
    :param fill: флаг, указывающий на необходимость залить или не залить фигуру. По-умолчанию равен True
    :return:
    '''
    sign = f" {sign} "
    for i in range(0, length):
        print(sign, end="")
    print()
    line = sign
    if fill:
        for i in range(0, length - 1):
            line += sign
    else:
        for i in range(0, length - 2):
            line += sign
    for i in range(0, length - 2):
        print(line)
    for i in range(0, length):
        print(sign, end="")
    print()

#sign = input("Введите знак: ")
#length = int(input("Введите ширину квадрата: "))
#fill = bool(input("Хотите ли вы закрасить? (Y/N) "))
#square(length, sign)

# Именнованные параметры или же передача параметров по их именам.
# Когда вы вызываете функцию - порядок следования в точке вызова можно изменить.
# К этому прибегают из соображений читаемости, удобства или иных.
# Для таких целей можно использовать передачу через имя параметра функции - то есть буквально указать, что такой-то переменной на вход указанное значение
# Синтаксис ВЫЗОВА:  <функция>(<имя параметра>=<значения>)
# ВАЖНО - в случае использования именнованных параметров их порядок НЕ ВАЖЕН
# Пример:
print()
#square(length, fill=True)

# Комментарий или описание функции
# У любой функции должно быть некоторое описание, которое сможет прочитать другой программист (или же вы сами) и понять ожидаемое поведение функции и смыл ее параметров
# ВАЖНО - сам текст и форма описания функций обычно указывается в конвенции о коде
# ВАЖНО - описание указывается в месте ОБЪЯВЛЕНИЯ функции
# Синтаксис:
'''
    def <название функции> (<список параметров>):
    \''' <описание функции> \'''
'''
#square()

# Переменное количество параметров
# Функция может не всегда предоставлять какое-то ограниченное и точное кол-во параметров для использования. Иногда бывает необходимо передать множество параметров, причем их кол-во заранее не известно. В этом случае использую параметр с ПЕРЕМЕННЫМ кол-вом параметров, который вмещает в себя все указанные параметры
# Синтаксис: def <функция> (*<параметр>):
# Пример:

def summer(first, *variables):
    result = first
    for i in variables:
        result += i
    return  result

print(summer(2,3,4,5,100))
# ВАЖНО - параметры ПО-УМОЛЧАНИЮ также указываются ПОСЛЕ параметров переменного кол-ва
# ВАЖНО - параметры без значения ПО-УМОЛЧАНИЮ ОБЯЗАТЕЛЬНО идут ПЕРЕД параметрами переменного кол-ва