# Структуры данных - Контейнеры - Коллекции

# Виды структур данных:
# 1. Списки - list - []
# 1.1 Кортеж - tuple - ()
# 1.2 Диапазон - range
# 2. Словари - dictionary - {}
# 3. Множества - set - {,}

# ВАЖНО - ВСЕ структуры данных в Python представляют из сеья типы данных, то есть могут быть использованы, как переменные, так и являсь частью другой структуры данных

# 1. Список - набор значений, доступ которых осуществляется по их индексам (номерам)
# ВАЖНО - индексация элементов в списке НАЧИНАЕТСЯ с 0
# Создание списка

lst_1 = list([1,2,3])
lst_2 = [4,5,6] # Список lst_2
lst_3 = list(lst_2) # Список lst_1 как копия отдельная lst_2
lst_4 = lst_2 # Список на ту же память, что и lst_2

print(lst_2)
lst_2.append(7)
print(lst_3)
print(lst_4, end="\n--------------------\n")
# ВАЖНО - при создании, списки можно проинициализировать каким-то значениям, тогда эти значение необходимо заключить между скобок
# ВАЖНО - если списку при создании дать другой список в качестве основы, ТО ОБА этих списка будут ссылаться на одни и те же данные
# Добавление и удаление элементов

# append(<значение>) - добавляет элемент со значением <значение> в конец списка

# insert(<индекс>, <значение>) - добавляет элемент ПЕРЕД элементом с индексом <индекс>

# extend(<список элементов>) - добавляет в конец списка <список элементов>

lst_2.insert(0, 101)
print(lst_2)

# pop(<индекс>) - удаляет элемент с индексом <индекс>
# ВАЖНО - если НЕ передать <индекс>, то функция удалит последний элемент массива
lst_2.pop()
print(lst_2, end="\n--------------------\n")

# remove(<значение>) - удаляет ПЕРВОЕ ВХОЖДЕНИЕ элемента с значением <значение>
# ВАЖНО - если попытаться удалить элемент, значение которого НЕТ в списке - будет брошена ошибка выполнения программы. Поэтому перед удалением необходимо убедиться, что такой элемент действительно есть в списке

# clear() - очищает список полностью

# Хождение по спискам
# Обращение к конеретному элементу списка происходит через его индекс - то есть его номер последовательности
# 1. Через функцию index(<значение>) - она вернет индекс первого вхождения элемента с значением <значение>

# 2. Банально через перечисление от 0 до размера списка
sizeList = len(lst_2)
it = 0
while it < sizeList:
    print(lst_2[it])
    it += 1

# Самым простым способом получения доступа к элементам списка конечно же остается for
for elem in lst_2:
    print(elem, end="; ")
print()
print(lst_2, end="\n--------------------\n")

# Полезные методы списков
# sort(<key>, <reverse>) - сортирует элементы списка по оператору сравнения в порядке возрастания
# <reverse> - флаг отвечающий за то в каком порядке указать элементы. По-умолчанию False
lst_2.sort()
print(lst_2, end="\n--------------------\n")

# reverse() - разворачивает порядок элементов и делает список обратным существующему
lst_2.reverse()
print(lst_2, end="\n--------------------\n")
lst_2.reverse()

# copy - возвращает копию списка

# Списки в списках - ВЛоженные списки - имеют ровно те же методы для работы, что и обычные списки. Единственным отличием является то, что для обращения к элементам вложенного списка требуется указывать 2 или более списков
# Пример:
# val = [[1,2,3][4,5,6]]
# для получения значения 2: val [0][1]
# ВАЖНО - такая матрешка может быть в глубину сколь угодно большой

# 1.1 Кортеж - это неизменяемый список
tup_1 = tuple([5,6,7,8])
tup_2 = (1,2,3,4)
tup_3 = tuple(lst_2)
tup_4 = list(tup_3)
print(end="\n--------------------\n")

# 1.2 range - это числовой список
rang = range(0,10)
print(rang)
print(end="\n--------------------\n")

# Синтаксис range: range (<начало>,<конец>,<шаг>) - создает числовой список от [<начало> до <конца> с шагом <шаг>
for elem in range(0,10):
    print(elem)
print(end="\n--------------------\n")

# 3. Множества - set - это список УНИКАЛЬНЫХ элементов
sett_1 = {2,}
sett_2 = set()
sett_3 = set(lst_2)
print(lst_2)
print(sett_3)
print(end="\n--------------------\n")

# add - добавляет элемент в множество
print(sett_3)
sett_3.add(1001)

# pop() - удаляет первый элемент списка
print(sett_3)
print(end="\n--------------------\n")
sett_3.pop()
print(sett_3)
print(end="\n--------------------\n")

# Сравнения множеств

sett_4 = {1,2,3,4,5}
sett_5 = {4,5,6,7,8}
print(sett_4 & sett_5) # Пересечение множеств - intersection
print(sett_4 | sett_5) # Объединение множеств - union
print(sett_4 ^ sett_5) # Уникальные элементы множеств - symmetric_difference
print(end="\n--------------------\n")
print(sett_4.difference(sett_5), sett_5.difference(sett_4))
print(end="\n--------------------\n")